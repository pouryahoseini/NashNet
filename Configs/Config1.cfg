[DEFAULT]
# Game Settings
num_players = 2
num_strategies = [10, 10]
max_equilibria = 10

# Initial model weights (a file name, not mandatory)
# If any weights file is being provided, full path starting from the project directory is necessary
# ./Model/best_modelWeights.h5
initial_model_weights =
rewrite_saved_test_data_if_model_weights_given = False

# Single- or multi-output?
enable_hydra = True
#Options for hydra_physique: bull_necked, sawfish
hydra_physique = sawfish

# Loss Function
# Options for loss functions: Eq_MSE, payoff_MSE, payoff_Eq_weightedSum, payoff_Eq_multiplication
loss_type = Eq_MSE
payoff_to_equilibrium_weight = 2.0
# Options for payoff loss: closestPayoff, payoff_of_closestEq
payoff_loss_type = closestPayoff

# Model architecture
sawfish_common_layer_sizes = [200, 600, 1000, 1000, 1000, 1000, 1000, 400, 400, 400]
;sawfish_common_layer_sizes = [200, 600, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 400, 400, 400]
;bull_necked_common_layer_sizes = [200, 600, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 400, 400, 400]
bull_necked_common_layer_sizes = [200, 600, 1000, 1000, 1000, 1000, 1000, 400, 400, 400]
monohead_common_layer_sizes = [200, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 200, 100]
sawfish_head_layer_sizes = [200]
bull_necked_head_layer_sizes = [200]
hydra_layer_sizes_per_player = [200, 200, 120]
monohead_layer_sizes_per_player = [50, 50, 30]

# Training Strategy
epochs = 2
batch_size = 1024
batch_normalization = False
validation_split = 0.1
initial_learning_rate = 0.05
learning_rate_cycle_length = 1
momentum = 0.95
nesterov = True

# Testing
test_split = 0.1
examples_to_print = 0
cluster_examples = True
compute_epsilon = False
test_batch_size = 1024
commutativity_test_permutations = 0

# Datasets
normalize_input_data = True
dataset_types_quota = [1000000, 0, 0, 0]
general_dataset_files = [('Dataset-1_Games_3P-3x4x3_1M', 'Dataset-1_Equilibria_3P-3x4x3_1M')]
mixed_only_dataset_files = []
group_only_dataset_files = []
mixed_group_only_dataset_files = []
;dataset_types_quota = [200000, 1000000, 1000000, 200000]
;general_dataset_files = [('Dataset-1_Games_2P-3x3_1M', 'Dataset-1_Equilibria_2P-3x3_1M')]
;mixed_only_dataset_files = [('Dataset-DiscardedPure-1_Games_2P-3x3_1M', 'Dataset-DiscardedPure-1_Equilibria_2P-3x3_1M'), ('Dataset-DiscardedPure-2_Games_2P-3x3_1M', 'Dataset-DiscardedPure-2_Equilibria_2P-3x3_1M')]
;group_only_dataset_files = [('Dataset-NonSingle-1_Games_2P-3x3_1M', 'Dataset-NonSingle-1_Equilibria_2P-3x3_1M')]
;mixed_group_only_dataset_files = [('Dataset-DiscardedPure-NonSingle-1_Games_2P-3x3_100K', 'Dataset-DiscardedPure-NonSingle-1_Equilibria_2P-3x3_100K'), ('Dataset-DiscardedPure-NonSingle-2_Games_2P-3x3_100K', 'Dataset-DiscardedPure-NonSingle-2_Equilibria_2P-3x3_100K')]

# File Names
model_architecture_file = modelArchitecture
model_weights_file = modelWeights
model_best_weights_file = best_modelWeights
training_history_file = training_history.csv
test_results_file = test_results.csv
examples_print_file = printed_examples.txt
test_games_file = Saved_Test_Games.npy
test_equilibria_file = Saved_Test_Equilibria.npy
;test_games_file = Dataset-2_Games_2P-3x3_1M.npy
;test_equilibria_file = Dataset-2_Equilibria_2P-3x3_1M.npy
split_files_folder_name = Split_Files
